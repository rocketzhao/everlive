package com.everlive.user.service;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.sql.Timestamp;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.List;import com.everlive.framework.config.Config;import com.everlive.framework.utils.GetConnector;import com.everlive.framework.utils.MailService;import com.everlive.framework.utils.ToHashMapList;import com.everlive.user.dao.JudgeStarDao;public class JudgeStarServiceImpl implements JudgeStarService {	private JudgeStarDao judgeStarDao;		@Override	public void getStartList(Object obj) {		//SELECT TO_DAYS(NOW()) - TO_DAYS(logdate) FROM `el_user_star_status` WHERE 1 				String sqlstart = 				"select eum.contactA,eum.contactB,ec1.email as emailA,ec1.name as nameA, ec2.email as emailB," +					"ec2.name as nameB,eu.email as emailme,bb.userId,eu.username,eu.gender,bb.logdate " +					"from (select case " +								"when euss.logdate > aa.lastlogin then euss.logdate else aa.lastlogin end as logdate, " +								"euss.userId,euss.status from " +									"(select max(elul.datetime) as lastlogin,elu.id " +									"from `el_user` elu left join `el_user_log` elul on elu.username = elul.username left join " +									"`el_user_meteor` elum on elu.id = elum.user_id " +									"where elum.activeB = 1 and elu.active = 1 and elu.status = 0 and elul.status = 1 " +								"group by elu.id ) aa left join el_user_star_status euss on aa.id = euss.userId " +								"where euss.status = 'start' ) bb left join " +					"`el_user_meteor` eum on bb.userId = eum.user_id left join " +					"`el_user` eu on eu.id = bb.userId left join " +					"`el_contact` ec1 on eum.contactA = ec1.id left join " +					"`el_contact` ec2 on eum.contactB = ec2.id " +					"where TO_DAYS(NOW()) - TO_DAYS(bb.logdate) > 180";				System.out.println(sqlstart);		//select eum.contactA,eum.contactB,ec1.email as emailA,ec1.name as nameA, ec2.email as emailB,ec2.name as nameB,eu.email as emailme,bb.userId,eu.username,eu.gender,bb.logdate from (select case when euss.logdate > aa.lastlogin then euss.logdate else aa.lastlogin end as logdate, euss.userId,euss.status from (select max(elul.datetime) as lastlogin,elu.id from `el_user` elu left join `el_user_log` elul on elu.username = elul.username left join `el_user_meteor` elum on elu.id = elum.user_id where elum.activeB = 1 and elu.active = 1 and elu.status = 0 and elul.status = 1 group by elu.id ) aa left join el_user_star_status euss on aa.id = euss.userId where euss.status = 'start' ) bb left join `el_user_meteor` eum on bb.userId = eum.user_id left join `el_user` eu on eu.id = bb.userId left join `el_contact` ec1 on eum.contactA = ec1.id left join `el_contact` ec2 on eum.contactB = ec2.id where TO_DAYS(NOW()) - TO_DAYS(bb.logdate) > 180		Connection conn = GetConnector.getConnection();		try {			Statement st = (Statement) conn.createStatement();	//创建用于执行静态sql语句的Statement对象，st属局部变量	        ResultSet rs = null;			rs = st.executeQuery(sqlstart);//			ResultSetMetaData metaDataStart = rs.getMetaData();//metaDataStart是为了获取一行的所有字段			List<HashMap<String,Object>> mapList = ToHashMapList.toHashMapList(rs);			for(int i = 0;i < mapList.size();i++){				HashMap<String,Object> map = mapList.get(i);				String logdate = map.get("logdate")+"";	            Integer userId = (Integer) map.get("userId");	            String status = map.get("status")+"";	            if(null != logdate&&!"".equals(logdate)){            		DateFormat fmt =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");					Date startDate = fmt.parse(logdate);					Date nowDate = new Date();					long daytotal = nowDate.getTime()-startDate.getTime();					long day=(nowDate.getTime()-startDate.getTime())/(24*60*60*1000);//15552000					if(daytotal > day*24*60*60*1000){//由于计算day时舍去了小时差，故需要加上1						day += 1;					}					System.out.println(daytotal);					System.out.println(day);					if(day > 180){						//发送邮件						sendMail(map,"userId");						//更新logdate和status						status = "suspend1";//超过180天即出现suspend1//						boolean result = updateStatus(status,nowDate,userId,"getStartList");					}            	}		    }						//定时启动功能的增强（提前一个月预警）			String sqlstart2 = 					"select eum.contactA,eum.contactB,ec1.email as emailA,ec1.name as nameA, ec2.email as emailB," +							"ec2.name as nameB,eu.email as emailme,bb.userId,eu.username,eu.gender,bb.logdate " +							"from (select case " +									"when euss.logdate > aa.lastlogin then euss.logdate else aa.lastlogin end as logdate, " +									"euss.userId,euss.status from " +										"(select max(elul.datetime) as lastlogin,elu.id " +										"from `el_user` elu left join `el_user_log` elul on elu.username = elul.username left join " +										"`el_user_meteor` elum on elu.id = elum.user_id " +										"where elum.activeB = 1 and elu.active = 1 and elu.status = 0 and elul.status = 1 " +									"group by elu.id ) aa left join el_user_star_status euss on aa.id = euss.userId " +									"where euss.status = 'start' ) bb left join " +							"`el_user_meteor` eum on bb.userId = eum.user_id left join " +							"`el_user` eu on eu.id = bb.userId left join " +							"`el_contact` ec1 on eum.contactA = ec1.id left join " +							"`el_contact` ec2 on eum.contactB = ec2.id " +							"where TO_DAYS(NOW()) - TO_DAYS(bb.logdate) = 150";			System.out.println(sqlstart2);			rs = st.executeQuery(sqlstart2);			//select eum.contactA,eum.contactB,ec1.email as emailA,ec1.name as nameA, ec2.email as emailB,ec2.name as nameB,eu.email as emailme,bb.userId,eu.username,eu.gender,bb.logdate from (select case when euss.logdate > aa.lastlogin then euss.logdate else aa.lastlogin end as logdate, euss.userId,euss.status from (select max(elul.datetime) as lastlogin,elu.id from `el_user` elu left join `el_user_log` elul on elu.username = elul.username left join `el_user_meteor` elum on elu.id = elum.user_id where elum.activeB = 1 and elu.active = 1 and elu.status = 0 and elul.status = 1 group by elu.id ) aa left join el_user_star_status euss on aa.id = euss.userId where euss.status = 'start' ) bb left join `el_user_meteor` eum on bb.userId = eum.user_id left join `el_user` eu on eu.id = bb.userId left join `el_contact` ec1 on eum.contactA = ec1.id left join `el_contact` ec2 on eum.contactB = ec2.id where TO_DAYS(NOW()) - TO_DAYS(bb.logdate) = 150			List<HashMap<String,Object>> mapList2 = ToHashMapList.toHashMapList(rs);			for(int i = 0;i < mapList2.size();i++){				HashMap<String,Object> map = mapList2.get(i);				String logdate = map.get("logdate")+"";	            Integer userId = (Integer) map.get("userId");	            String status = map.get("status")+"";	            if(null != logdate&&!"".equals(logdate)){            		DateFormat fmt =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");					Date startDate = fmt.parse(logdate);					Date nowDate = new Date();					long daytotal = nowDate.getTime()-startDate.getTime();					long day=(nowDate.getTime()-startDate.getTime())/(24*60*60*1000);//15552000					if(daytotal > day*24*60*60*1000){//由于计算day时舍去了小时差，故需要加上1						day += 1;					}					System.out.println(daytotal);					System.out.println(day);					if(day == 150){						//发送预警邮件						sendMail(map,"userId");						//更新logdate和status						status = "start";//						boolean result = updateStatus(status,nowDate,userId,"getStartListReady");					}            	}		    }		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (ParseException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	//关闭数据库连接		}	}	@Override	public void getSuspend1List(Object obj) {		String sqlsuspend1 = 				"select eum.contactA,eum.contactB,ec1.email as emailA,ec1.name as nameA, ec2.email as emailB," +						"ec2.name as nameB,eu.email as emailme,bb.userId,eu.username,eu.gender,bb.logdate " +						"from (select case " +								"when euss.logdate > aa.lastlogin then euss.logdate else aa.lastlogin end as logdate, " +								"euss.userId,euss.status from " +									"(select max(elul.datetime) as lastlogin,elu.id " +									"from `el_user` elu left join `el_user_log` elul on elu.username = elul.username left join " +									"`el_user_meteor` elum on elu.id = elum.user_id " +									"where elum.activeB = 1 and elu.active = 1 and elu.status = 0 and elul.status = 1 " +						"group by elu.id ) aa left join el_user_star_status euss on aa.id = euss.userId " +						"where euss.status = 'suspend1' ) bb left join " +						"`el_user_meteor` eum on bb.userId = eum.user_id left join " +						"`el_user` eu on eu.id = bb.userId left join " +						"`el_contact` ec1 on eum.contactA = ec1.id left join " +						"`el_contact` ec2 on eum.contactB = ec2.id " +						"where TO_DAYS(NOW()) - TO_DAYS(bb.logdate) > 7";				System.out.println(sqlsuspend1);				Connection conn = GetConnector.getConnection();		try {			Statement st = (Statement) conn.createStatement();	//创建用于执行静态sql语句的Statement对象，st属局部变量	        ResultSet rs = null;			rs = st.executeQuery(sqlsuspend1);			List<HashMap<String,Object>> mapList = ToHashMapList.toHashMapList(rs);			for(int i = 0;i < mapList.size();i++){				HashMap<String,Object> map = mapList.get(i);				String logdate = map.get("logdate")+"";	            Integer userId = (Integer) map.get("userId");	            String status = map.get("status")+"";		        // 遍历每一列	            if(null != logdate&&!"".equals(logdate)){            		DateFormat fmt =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");					Date startDate = fmt.parse(logdate);					Date nowDate = new Date();					long daytotal = nowDate.getTime()-startDate.getTime();					long day=(nowDate.getTime()-startDate.getTime())/(24*60*60*1000);//15552000					if(daytotal > day*24*60*60*1000){//由于计算day时舍去了小时差，故需要加上1						day += 1;					}					System.out.println(daytotal);					System.out.println(day);					if(day > 7){						//从邮件回复表中查询本人在这一周中是否有回复						sqlsuspend1 = "SELECT count(1) as total FROM el_mail_feedback WHERE id = 1 and TO_DAYS(NOW()) - TO_DAYS(server_date) <= 7 ";						rs = st.executeQuery(sqlsuspend1);						List<HashMap<String,Object>> mapList2 = ToHashMapList.toHashMapList(rs);						if(mapList2.size() > 0){							status = "start";							boolean result = updateStatus(status,nowDate,userId,"getSuspend1List");						}else{							//第二次发送心跳邮件给本人							sendMail(map,"userId");														//再判断是否存在第一联系人，若有，则发送心跳邮件给他。							Integer contactA = (Integer) map.get("contactA");							if(null != contactA&&contactA>0){								//发送邮件给第一联系人								sendMail(map,"contactA");							}														//更新logdate							status = "suspend2";//不管其是否有第一联系人，都会出现suspend2							boolean result = updateStatus(status,nowDate,userId,"getSuspend1List");						}											}            	}		    }					} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (ParseException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	//关闭数据库连接		}	}	@Override	public void getSuspend2List(Object obj) {		String sqlsuspend2 = 				"select eum.contactA,eum.contactB,ec1.email as emailA,ec1.name as nameA, ec2.email as emailB," +						"ec2.name as nameB,eu.email as emailme,bb.userId,eu.username,eu.gender,bb.logdate " +						"from (select case " +								"when euss.logdate > aa.lastlogin then euss.logdate else aa.lastlogin end as logdate, " +								"euss.userId,euss.status from " +									"(select max(elul.datetime) as lastlogin,elu.id " +									"from `el_user` elu left join `el_user_log` elul on elu.username = elul.username left join " +									"`el_user_meteor` elum on elu.id = elum.user_id " +									"where elum.activeB = 1 and elu.active = 1 and elu.status = 0 and elul.status = 1 " +						"group by elu.id ) aa left join el_user_star_status euss on aa.id = euss.userId " +						"where euss.status = 'suspend2' ) bb left join " +						"`el_user_meteor` eum on bb.userId = eum.user_id left join " +						"`el_user` eu on eu.id = bb.userId left join " +						"`el_contact` ec1 on eum.contactA = ec1.id left join " +						"`el_contact` ec2 on eum.contactB = ec2.id " +						"where TO_DAYS(NOW()) - TO_DAYS(bb.logdate) > 7";				System.out.println(sqlsuspend2);				Connection conn = GetConnector.getConnection();		try {			Statement st = (Statement) conn.createStatement();	//创建用于执行静态sql语句的Statement对象，st属局部变量	        ResultSet rs = null;			rs = st.executeQuery(sqlsuspend2);			List<HashMap<String,Object>> mapList = ToHashMapList.toHashMapList(rs);			for(int i = 0;i < mapList.size();i++){				HashMap<String,Object> map = mapList.get(i);				String logdate = map.get("logdate")+"";	            Integer userId = (Integer) map.get("userId");	            String status = map.get("status")+"";	            if(null != logdate&&!"".equals(logdate)){            		DateFormat fmt =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");					Date startDate = fmt.parse(logdate);					Date nowDate = new Date();					long daytotal = nowDate.getTime()-startDate.getTime();					long day=(nowDate.getTime()-startDate.getTime())/(24*60*60*1000);//15552000					if(daytotal > day*24*60*60*1000){//由于计算day时舍去了小时差，故需要加上1						day += 1;					}					System.out.println(daytotal);					System.out.println(day);					if(day > 7){						int p = 0;//计数器，大于0表示还活着												//从邮件回复表中查询本人在这一周中是否有回复						sqlsuspend2 = "SELECT count(1) as total FROM el_mail_feedback WHERE id = "+userId+" and contact = "+userId+"  and TO_DAYS(NOW()) - TO_DAYS(server_date) <= 7 ";						rs = st.executeQuery(sqlsuspend2);						List<HashMap<String,Object>> mapList2 = ToHashMapList.toHashMapList(rs);						if(mapList2.size() > 0){//若有，则将状态改为start（记录log），并更新logdate，即还活着							status = "start";							p++;//本人有回复							boolean result = updateStatus(status,nowDate,userId,"getSuspend2List");						}else{//若无，根据本人id从邮件发送表中查询一周前是否有发送给第一联系人的邮件							Integer contactA = (Integer) map.get("contactA");							if(null != contactA&&contactA>0){//如果没有第一联系人，则p=0								sqlsuspend2 = "SELECT count(1) as total FROM el_mail_send WHERE id = "+userId+" and contact = "+contactA+" and TO_DAYS(NOW()) - TO_DAYS(server_date) <= 7 ";								rs = st.executeQuery(sqlsuspend2);								List<HashMap<String,Object>> mapList3 = ToHashMapList.toHashMapList(rs);								if(mapList3.size() > 0){//若有发送给第一联系人的邮件，则判断其是否有回复									sqlsuspend2 = "SELECT feedback_value FROM el_mail_feedback WHERE id = "+userId+" and contact = "+contactA+" and TO_DAYS(NOW()) - TO_DAYS(server_date) <= 7 ";									rs = st.executeQuery(sqlsuspend2);									List<HashMap<String,Object>> mapList4 = ToHashMapList.toHashMapList(rs);									if(mapList4.size() > 0){//若有，判断回复值										HashMap<String,Object> map4 = mapList4.get(0);										Integer feedback_value = (Integer) map4.get("feedback_value");										if(feedback_value == 0){//若还活着，则将状态改为start（记录log），并更新logdate，											status = "start";											p++;//存在第一联系人并且其回复活着											boolean result = updateStatus(status,nowDate,userId,"getSuspend2List");										}									}								}							}														if(p == 0){								Integer contactB = (Integer) map.get("contactB");//判断是否存在第二联系人								if(null != contactB&&contactB>0){//若有，则发送心跳邮件给本人、第一联系人、第二联系人，并将状态改成suspend3（记录log），									//第三次发送心跳邮件给本人									sendMail(map,"userId");									sendMail(map,"contactA");									sendMail(map,"contactB");									status = "suspend3";									boolean result = updateStatus(status,nowDate,userId,"getSuspend2List");//只有当其有第二联系人时，才会出现suspend3的情况								}else{									//若无，已死，则将状态改为dead（记录log），并更新logdate。									status = "dead";									boolean result = updateStatus(status,nowDate,userId,"getSuspend2List");								}							}						}}            	}		    }					} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (ParseException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	//关闭数据库连接		}			}	@Override	public void getSuspend3List(Object obj) {		String sqlsuspend3 = 				"select eum.contactA,eum.contactB,ec1.email as emailA,ec1.name as nameA, ec2.email as emailB," +						"ec2.name as nameB,eu.email as emailme,bb.userId,eu.username,eu.gender,bb.logdate " +						"from (select case " +								"when euss.logdate > aa.lastlogin then euss.logdate else aa.lastlogin end as logdate, " +								"euss.userId,euss.status from " +									"(select max(elul.datetime) as lastlogin,elu.id " +									"from `el_user` elu left join `el_user_log` elul on elu.username = elul.username left join " +									"`el_user_meteor` elum on elu.id = elum.user_id " +									"where elum.activeB = 1 and elu.active = 1 and elu.status = 0 and elul.status = 1 " +						"group by elu.id ) aa left join el_user_star_status euss on aa.id = euss.userId " +						"where euss.status = 'suspend3' ) bb left join " +						"`el_user_meteor` eum on bb.userId = eum.user_id left join " +						"`el_user` eu on eu.id = bb.userId left join " +						"`el_contact` ec1 on eum.contactA = ec1.id left join " +						"`el_contact` ec2 on eum.contactB = ec2.id " +						"where TO_DAYS(NOW()) - TO_DAYS(bb.logdate) > 7";				System.out.println(sqlsuspend3);				Connection conn = GetConnector.getConnection();		try {			Statement st = (Statement) conn.createStatement();	//创建用于执行静态sql语句的Statement对象，st属局部变量	        ResultSet rs = null;			rs = st.executeQuery(sqlsuspend3);			List<HashMap<String,Object>> mapList = ToHashMapList.toHashMapList(rs);			for(int i = 0;i < mapList.size();i++){				HashMap<String,Object> map = mapList.get(i);				String logdate = map.get("logdate")+"";	            Integer userId = (Integer) map.get("userId");	            String status = map.get("status")+"";	            if(null != logdate&&!"".equals(logdate)){            		DateFormat fmt =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");					Date startDate = fmt.parse(logdate);					Date nowDate = new Date();					long daytotal = nowDate.getTime()-startDate.getTime();					long day=(nowDate.getTime()-startDate.getTime())/(24*60*60*1000);//15552000					if(daytotal > day*24*60*60*1000){//由于计算day时舍去了小时差，故需要加上1						day += 1;					}					System.out.println(daytotal);					System.out.println(day);					if(day > 7){						int p = 0;//计数器，等于1表示还活着						int q = 0;//计数器，等于2表示还活着						//从邮件回复表中查询本人在这一周中是否有回复						sqlsuspend3 = "SELECT count(1) as total FROM el_mail_feedback WHERE id = "+userId+" and contact = "+userId+"  and TO_DAYS(NOW()) - TO_DAYS(server_date) <= 7 ";						rs = st.executeQuery(sqlsuspend3);						List<HashMap<String,Object>> mapList2 = ToHashMapList.toHashMapList(rs);						if(mapList2.size() > 0){//若有，则将状态改为start（记录log），并更新logdate，即还活着							p++;//本人有回复						}else{//若无，根据本人id从邮件回复表中查询这一周中是否有第一、二联系人的回复							Integer contactA = (Integer) map.get("contactA");							Integer contactB = (Integer) map.get("contactB");							sqlsuspend3 = "SELECT feedback_value FROM el_mail_feedback WHERE id = "+userId+" and contact = "+contactA+" and TO_DAYS(NOW()) - TO_DAYS(server_date) <= 7 ";							rs = st.executeQuery(sqlsuspend3);							List<HashMap<String,Object>> mapList3 = ToHashMapList.toHashMapList(rs);							if(mapList3.size() > 0){//若有发送给第一联系人的邮件，则判断其是否有回复								HashMap<String,Object> map3 = mapList3.get(0);								Integer feedback_value = (Integer) map3.get("feedback_value");								if(feedback_value == 0){//若还活着，则将状态改为start（记录log），并更新logdate，									q++;//存在第一联系人并且其回复活着								}							}							sqlsuspend3 = "SELECT feedback_value FROM el_mail_feedback WHERE id = "+userId+" and contact = "+contactB+" and TO_DAYS(NOW()) - TO_DAYS(server_date) <= 7 ";							rs = st.executeQuery(sqlsuspend3);							List<HashMap<String,Object>> mapList4 = ToHashMapList.toHashMapList(rs);							if(mapList4.size() > 0){//若有发送给第二联系人的邮件，则判断其是否有回复								HashMap<String,Object> map4 = mapList4.get(0);								Integer feedback_value = (Integer) map4.get("feedback_value");								if(feedback_value == 0){//若还活着，则将状态改为start（记录log），并更新logdate，									q++;//存在第一联系人并且其回复活着								}							}													}						if(p == 1&&q == 2){							//仍活，则将状态改为start（记录log），并更新logdate。							status = "start";							boolean result = updateStatus(status,nowDate,userId,"getSuspend3List");						}else if(p == 0&&q == 0){							//已死，则将状态改为dead（记录log），并更新logdate。							status = "dead";							boolean result = updateStatus(status,nowDate,userId,"getSuspend3List");						}else{							//第三次发送心跳邮件给本人							sendMail(map,"userId");							sendMail(map,"contactA");							sendMail(map,"contactB");							status = "suspend3";							boolean result = updateStatus(status,nowDate,userId,"getSuspend3List");//只有当其有第二联系人时，才会出现suspend3的情况						}											}            	}		    }					} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (ParseException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	//关闭数据库连接		}	}	@SuppressWarnings("rawtypes")	public boolean sendMail(HashMap map,String contact){		String name = "";		String email = "";		String username = map.get("username")+"";		Boolean gender = (Boolean) map.get("gender");		Integer userId = (Integer) map.get("userId");		String sex = "他";		if(gender == false){			sex = "她";		}else if(gender == true){			sex = "他";		}		contact = "userId";		if("userId".equals(contact)){			name = map.get("username")+"";			email = map.get("emailme")+"";			email = "727507531@qq.com";//"727507531@qq.com";						SimpleDateFormat fmt2 = new SimpleDateFormat("yyyy-MM-dd");			String dateString = fmt2.format(new Date());						String linklive = Config.url+Config.index+Config.dress+"?token=xxxxxxxxxxxxxxxxxxx&live=1";			String linkdead = "";			String linkweb = Config.url;//			求证离世邮件//			----------------------------------------------------------------------------------------//			用户名(用户姓名)您好，Everlive向您确认在世情况//			 //			用户名(用户姓名)：//			 //			     您好，这是一封来自记录生命网（Everlive.me）的邮件，向您求证您的在世情况。//			     作为Everlive用户 用户名(用户姓名) ，您与网站约定，在您未登录网站半年后，我们需向您发出邮件，求证您的在世情况。一旦确认您已离世，您在网站上保存的信息将向世人发布。//			     如果您仍安然在世，请立即点击这里确认在世 。//			 //			     Everlive.me是一个记录生命、托付传承的网站，欢迎您访问并立即体验本站。//			 //			                                                                                            Everlive.me 2014-01-05			StringBuffer content = new StringBuffer();			content.append("<style type='text/css'>a{text-decoration:none;color:#000000;font-size:14px;}" +					"a:visited{text-decoration:none;color:#ff0000;font-size:14px}" +					"table{border-collapse:collapse;}  td{border-style: solid; border-width: 1px;}</style>");			content.append("<span style=\"font-weight:800;\">用户名（").append(username).append("）</span>您好，Everlive向您确认在世情况。<br>");			content.append("<br>");			content.append("<span style=\"font-weight:800;\">").append(username).append("</span>");			content.append("<br>");			content.append("<span >&nbsp;&nbsp;&nbsp;&nbsp;您好，这是一封来自<span style=\"font-weight:800;\">记录生命网（Everlive.me）</span>的邮件，向您求证您的在世情况。</span><br>");			content.append("<span>&nbsp;&nbsp;&nbsp;&nbsp;作为Everlive用户 <span style=\"font-weight:800;\">用户名(").append(username).append(")</span>，您与网站约定，</span>");			content.append("在您未登录网站半年后，我们需向您发出邮件，求证您的在世情况。一旦确认您已离世，您在网站上保存的信息将向世人发布。</br>");			content.append("如果您仍安然在世，请立即<a style=\"color:blue;\" href=\""+linklive+"\">点击这里确认在世</a>。<br>");			content.append("<br>");			content.append("<span>&nbsp;&nbsp;&nbsp;&nbsp;Everlive.me是一个记录生命、托付传承的网站，欢迎您<a style=\"color:blue;\" href=\""+linkweb+"\">访问并立即体验本站</a>。</span><br>");			content.append("<br>");			content.append("<div style=\"text-align:right;\">Everlive.me "+dateString+"</div><br>");			content.append("<br>");			MailService mailservice = new MailService("smtp.qq.com", "CVMS@mobilitychina.com", "CVMS", "CVMS@mobilitychina.com", "jtwmydtsgx8", email, "求证离世邮件", content.toString());			mailservice.send();			//添加log			addSendMailLog(userId,contact,name,email,linklive,linkdead);		}else{			if("contactA".equals(contact)){				name = map.get("nameA")+"";				email = map.get("emailA")+"";			}else if("contactB".equals(contact)){				name = map.get("nameB")+"";				email = map.get("emailB")+"";			}			email = "727507531@qq.com";//"727507531@qq.com";			SimpleDateFormat fmt2 = new SimpleDateFormat("yyyy-MM-dd");			String dateString = fmt2.format(new Date());						String linklive = Config.url+Config.index+Config.dress+"?token=xxxxxxxxxxxxxxxxxxx&live=1";			String linkdead = Config.url+Config.index+Config.dress+"?token=xxxxxxxxxxxxxxxxxxx&live=1";			String linkweb = Config.url;			StringBuffer content = new StringBuffer();			content.append("<style type='text/css'>a{text-decoration:none;color:#000000;font-size:14px;}" +					"a:visited{text-decoration:none;color:#ff0000;font-size:14px}" +					"table{border-collapse:collapse;}  td{border-style: solid; border-width: 1px;}</style>");			content.append("<span style=\"font-weight:800;\">").append(name).append("</span>您好，Everlive向您确认<span style=\"font-weight:800;\">用户名 (").append(username).append(")</span> 的在世情况。<br>");			content.append("<br>");			content.append("<span style=\"font-weight:800;\">").append(username).append("</span>");			content.append("<br>");			content.append("<span style=\"font-weight:800;\">&nbsp;&nbsp;&nbsp;&nbsp;您好，这是一封来自<span style=\"font-weight:800;\">记录生命网（Everlive.me）</span>的邮件，向您求证 <span style=\"font-weight:800;\">用户名(").append(username).append(")</span> 的在世情况。</span><br>");			content.append("<span>&nbsp;&nbsp;&nbsp;&nbsp;Everlive用户 <span style=\"font-weight:800;\">用户名(").append(username).append(")</span>将您设为生命状态的见证人，根据</span>");			content.append(sex).append("与网站的约定，在他未登录网站半年后，我们需向您和他同时发出邮件，求证他的在世情况。一旦确认他已离世，他在网站上保存的信息将向世人发布。<br>");			content.append("如果您确认他在世，请<a style=\"color:blue;\" href=\""+linklive+"\">点击这里确认在世</a> 否则，请<a style=\"color:blue;\" href=\""+linkdead+"\">点击这里确认离世</a>或忽略本邮件。<br>");			content.append("<br>");			content.append("<span>&nbsp;&nbsp;&nbsp;&nbsp;Everlive.me是一个记录生命、托付传承的网站，欢迎您<a style=\"color:blue;\" href=\""+linkweb+"\">访问并立即体验本站</a>。</span><br>");			content.append("<br>");			content.append("<div style=\"text-align:right;\">Everlive.me "+dateString+"</div><br>");			content.append("<br>");			MailService mailservice = new MailService("smtp.qq.com", "CVMS@mobilitychina.com", "CVMS", "CVMS@mobilitychina.com", "jtwmydtsgx8", email, "求证离世邮件", content.toString());			//附件//			Mail mail1 = new Mail();//			mail1.setFilepath(filename);//			mail1.setFilename("业务展望品牌统计报表-" + userId + ".xls");//			map.addAttachfile(mail1);			mailservice.send();			//添加log			addSendMailLog(userId,contact,name,email,linklive,linkdead);		}		//		联系人姓名您好，Everlive向您确认用户名(用户姓名)的在世情况//		 //		联系人姓名//		 //		     您好，这是一封来自记录生命网（Everlive.me）的邮件，向您求证 用户名(用户姓名) 的在世情况。//		     Everlive用户 用户名(用户姓名) 将您设为生命状态的见证人，根据他[性别]与网站的约定，在他未登录网站半年后，我们需向您和他同时发出邮件，求证他的在世情况。一旦确认他已离世，他在网站上保存的信息将向世人发布。//		     如果您确认他在世，请点击这里确认在世 否则，请点击这里确认离世或忽略本邮件。//		 //		     Everlive.me是一个记录生命、托付传承的网站，欢迎您访问并立即体验本站。//		 //		                                                                                            Everlive.me 2014-01-05		return false;	}		public boolean updateStatus(String status,Date date,Integer userId,String function){        String nowTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date);//将时间格式转换成符合Timestamp要求的格式.        Timestamp logdate = Timestamp.valueOf(nowTime);//把时间转换		String sqlstart = "update el_user_star_status set logdate='"+logdate+"',status='"+status+"' " +				"where userId = "+userId;		Connection conn = GetConnector.getConnection();		try {			Statement st = (Statement) conn.createStatement();	//创建用于执行静态sql语句的Statement对象，st属局部变量			int rs2 = st.executeUpdate(sqlstart);			//添加log			String log = "insert into `el_user_star_status_log` (userId,status,function,logdate) " +					"values ("+userId+",'"+status+"','"+function+"',now())";			int rs3 =  st.executeUpdate(log);			System.out.println(rs3);			System.out.println(rs2);			if(rs2 > 0){				//添加修改成功的log				return true;			}else{				//添加修改失败的log				return false;			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	//关闭数据库连接		}		return false;	}		@Override	public void addTaskLog(String function) {		String log = "insert into `el_task_log` (function,date) values ('"+function+"',now())";		Connection conn = GetConnector.getConnection();		try {			Statement st = (Statement) conn.createStatement();	//创建用于执行静态sql语句的Statement对象，st属局部变量			int rs2 = st.executeUpdate(log);			System.out.println(rs2);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	//关闭数据库连接		}	}	public void addSendMailLog(Integer userId,String contact,String name,String email,			String linklive,String linkdead){		String log = "insert into `el_mail_send` (userId,contact,name,email,linklive,linkdead,senddate) " +				"values ("+userId+",'"+contact+"','"+name+"','"+email+"','"+linklive+"','"+linkdead+"',now())";		Connection conn = GetConnector.getConnection();		try {			Statement st = (Statement) conn.createStatement();	//创建用于执行静态sql语句的Statement对象，st属局部变量			int rs2 = st.executeUpdate(log);			System.out.println(rs2);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally{			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}	//关闭数据库连接		}	}		public JudgeStarDao getJudgeStarDao() {		return judgeStarDao;	}	public void setJudgeStarDao(JudgeStarDao judgeStarDao) {		this.judgeStarDao = judgeStarDao;	}}